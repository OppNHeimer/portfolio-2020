{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Main.svelte",
    "../../SidePanel.svelte",
    "../../Background.svelte",
    "../../Loader.svelte",
    "../../Home.svelte",
    "../../About.svelte",
    "../../Contact.svelte",
    "../../BackgroundControls.svelte",
    "../../HomeButton.svelte",
    "../../InfoButton.svelte",
    "../../ControlSlider.svelte",
    "../../ResetButton.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { afterUpdate } from 'svelte'\n\n\timport Background from './Background/Background.svelte'\n\timport Main from './Main/Main.svelte'\n\timport SidePanel from './SidePanel/SidePanel.svelte'\n\timport Loader from './Loader/Loader.svelte'\n\n\timport { \n\t\tactive,\n\t\tlongestScreenDimension,\n\t\tmobileLayout,\n\t\topen,\n\t\treset,\n\t\tscreenHeight,\n\t\tscreenWidth,\n\t\tscreenSize,\n\t\ttouch\n\t} from './stores.js'\n\n\tlet canvasHeight\n\tlet canvasWidth\n\tlet loaded = false\nÂ \n\twindow.onload = (event) => {\n\t\tloaded = true\n\t}\n\n\tconst handleKeydown = (e) => {\n\t\tif (!$open) {\n\t\t\tif (e.code == \"KeyR\") { reset.set(true) }\n\t\t}\n\t}\n\t\n\tconst touched = () => {\n\t\ttouch.set(true)\n\t}\n\tafterUpdate(() => {\n\t\tscreenHeight.set(canvasHeight)\t \n\t\tscreenWidth.set(canvasWidth)\t \n\t\tcanvasWidth < 1000 ? mobileLayout.set(true) : mobileLayout.set(false)\n\t\tif (canvasWidth < 650) { screenSize.set('small') }\n\t\telse if (canvasWidth < 750) { screenSize.set('medium') }\n\t\telse { screenSize.set('large') }\n\n\t\tconst longestDimension = $screenWidth >= $screenHeight ? $screenWidth : $screenHeight\n\t\tlongestScreenDimension.set(longestDimension)\n\t})\n</script>\n\n<style>\n\t:global(*) {\n\t\tfont-family: 'Major Mono Display', monospace;\n\t}\n\t\n\t:global(body) {\n\t\tpadding: 0;\n\t}\n\n\t:global(button) {\n\t\tcursor: pointer;\n\t}\n\n\t:global(.screen-reader-content) {\n\t\tposition:absolute;\n\t\tleft:-10000px;\n\t\ttop:auto;\n\t\twidth:1px;\n\t\theight:1px;\n\t\toverflow:hidden;\n\t}\n\n\tdiv {\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n    overflow: hidden;\n\t}\n\t\n</style>\n\n<svelte:window \n\ton:keydown={handleKeydown}\n\ton:touchstart|once={touched}\n\ton:blur={() => {active.set(false)}}\n\ton:focus={() => {active.set(true)}}\n\t/>\n<div \n\tbind:clientHeight={canvasHeight}\n\tbind:clientWidth={canvasWidth}\n\n>\n\t{#if loaded}\n\t\t{#if $open}\n\t\t\t<Main />\n\t\t{/if}\n\t\t{#if !$mobileLayout || !$open}\n\t\t\t<SidePanel />\n\t\t{/if}\n\t\t<Background />\n\t{/if}\n\t<Loader loaded={loaded}/>\n</div>",
    "<script>\n  import Home from './Home/Home.svelte'\n  import About from './About/About.svelte'\n  import Contact from './Contact/Contact.svelte'\n  import { openControlButtons } from '../helpers'\n  import { \n    screenHeight,\n    closeHover,\n    closedOnce,\n    currentView,\n    mobileLayout,\n    open,\n    screenSize,\n    sizeProgress,\n    speedProgress,\n    opacityProgress,\n    frequencyProgress\n  } from '../stores.js'\n\n  const controlButtons = [sizeProgress, speedProgress, opacityProgress, frequencyProgress]\n  const handleClose = () => {\n    open.set(false)\n    if (!$closedOnce) {\n      openControlButtons(controlButtons)\n      closedOnce.set(true)\n    }\n  }\n</script>\n\n<style>\n  .main { \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    z-index: 1;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n  }\n\n  .content {\n    position: relative;\n    min-width: var(--minWidth);\n    min-height: 500px;\n    width: var(--screenPercentage);\n    height: 50%;\n    pointer-events: all;\n  }\n\n  .close-button {\n    position: absolute;\n    right: var(--position);\n    top: var(--position);\n    height: 40px;\n    width: 40px;\n    z-index: 1;\n    opacity: 0;\n  }\n\n  .buttons {\n    display: flex;\n    justify-content: space-evenly;\n    width: 50%;\n    pointer-events: all;\n\n  }\n\n  .nav-button {\n    background: none;\n    color: white;\n    border: none;\n    font-size: var(--size);\n    text-shadow: 1px 1px 1px hsl(0, 0%, 0%, 40%);\n    z-index: 1;\n  }\n\n  .active {\n    font-weight: 600;\n    text-decoration: underline wavy 2px;\n  }\n</style>\n\n<div class='main'>\n  <div class='content' style='--minWidth:{$screenSize == 'large' ? 700 : 350}px;  --screenPercentage:{$screenSize == 'large' ? 50 : 75}%'>\n    {#if $currentView == 'home'}\n      <Home />\n    {:else if $currentView == 'about'}\n      <About />\n    {:else }\n      <Contact />\n    {/if}\n    <button \n      aria-label='close window button'\n      class='close-button'\n      style='--position:{$screenSize == 'large' ? 30 : 10}px'\n      on:click={handleClose} \n      on:mouseover={() => { $closeHover = true }}\n      on:mouseout={() => { $closeHover = false }}>\n      close\n    </button>\n  </div>\n  <nav \n    class='buttons' \n    style='--size:{ $screenSize == 'large' ? 24 : 18 }px'\n    role='navigation'\n  >\n    <button \n      aria-label='home button'\n      class='nav-button' \n      class:active={$currentView == 'home'} \n      on:click={() => $currentView = 'home'}>\n      home\n    </button>\n    <button\n      aria-label='about button'\n      class='nav-button'\n      class:active={$currentView == 'about'}\n      on:click={() => $currentView = 'about'}>\n      about\n    </button>\n    <button \n      aria-label='contact button'\n      class='nav-button' \n      class:active={$currentView == 'contact'} \n      on:click={() => $currentView = 'contact'}>\n      contact\n    </button>\n  </nav>\n</div>",
    "<script>\n  import { fade } from 'svelte/transition'\n  import BackgroundControls from './BackgroundControls/BackgroundControls.svelte'\n  import HomeButton from './HomeButton/HomeButton.svelte'\n  import InfoButton from './InfoButton/InfoButton.svelte'\n</script>\n\n<style>\n  .side-panel {\n    position: absolute;\n    right: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    width: 60px;\n    height: 100%;\n    z-index: 1;\n  }\n  \n  .controls-container {\n    height: 100%;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    pointer-events: none;\n  }\n</style>\n\n<div class='side-panel' transition:fade>\n  <HomeButton />\n  <InfoButton />\n  <div class='controls-container'>\n    <BackgroundControls />\n  </div>\n</div>",
    "<script>\n  import { onMount } from 'svelte'\n\n  import { setupCanvas } from '../helpers.js'\n  import P5Canvas from '../P5Canvas.svelte'\n  import { \n    active,\n    backgroundHue,\n    circleHue,\n    circleLocation,\n    frequencyValue,\n    longestScreenDimension,\n    opacityValue,\n    reset,\n    screenHeight,\n    screenWidth,\n    sizeValue\n  } from '../stores.js'\n\n  const hueMaxValue = 360\n  let mousePull = false\n  let mouseLocation = {x: 0, y: 0}\n  let cursorStyle = 'pointer'\n  let interval\n  \n  $: {\n    setFrequency($frequencyValue)\n  }\n\n  const generateCoordinates = (p5) => {\n    const circleSize = $sizeValue * ($longestScreenDimension * 1.1)\n    const centerX = $circleLocation.x\n    const centerY = $circleLocation.y\n\n    const pointsCount = 5\n    const sectionAngle = Math.PI*2 / pointsCount\n    const radius = circleSize / 2\n    let coordinates = []\n    for (let i = 1; i <= pointsCount; i++) {\n      var angle = i * sectionAngle\n      \n      const xOffset = Math.cos(angle) * radius\n      const yOffset = Math.sin(angle) * radius\n      const distanceToCenter = (Math.sqrt(\n        ((p5.mouseX - centerX) ** 2) + ((p5.mouseY - centerY) ** 2)\n      ))\n      \n      let x = centerX + xOffset\n      let y = centerY + yOffset\n\n      const distanceToVertex = (Math.sqrt(\n        ((p5.mouseX - x) ** 2) + ((p5.mouseY - y) ** 2)\n      ))\n      \n      const maxPush = $longestScreenDimension / 4\n      const push = maxPush - distanceToVertex\n\n      if (push > 0 ) {\n        let pushPercentage = (push / maxPush)\n\n        if (distanceToCenter > radius) {\n          x = centerX + (xOffset * (1 - pushPercentage))\n          y = centerY + (yOffset * (1 - pushPercentage))\n        } else {\n          x = centerX + xOffset - (xOffset * pushPercentage)\n          y = centerY + yOffset - (yOffset * pushPercentage)\n        }\n      }\n\n      coordinates.push([x,  y])\n    }\n\n    return coordinates\n  }\n\n  const drawShape = (p5, coordinates) => {\n    const saturation = 100\n    const strokeLightness = 97\n    const strokeAlpha = 100\n    const fillLightness = 85\n    const fillAlpha = $opacityValue * 100\n\n    p5.stroke($backgroundHue, saturation, strokeLightness, strokeAlpha);\n    p5.strokeWeight(1)\n    p5.fill($circleHue, saturation, fillLightness, fillAlpha)\n    \n    p5.beginShape();\n    coordinates.forEach(coordinate => {\n      p5.curveVertex(coordinate[0], coordinate[1])\n    })\n    p5.curveVertex(coordinates[0][0], coordinates[0][1])\n    p5.curveVertex(coordinates[1][0], coordinates[1][1])\n    p5.curveVertex(coordinates[2][0], coordinates[2][1])\n    p5.endShape()\n  }\n\n  const sketch = (p5) => {\n\t  p5.setup = () => {\n      setupCanvas(p5, $screenWidth, $screenHeight, 'background-holder')\n      p5.frameRate(10)\n\t  }\n\n\t  p5.draw = () => {\n      if ($reset) { \n        p5.clear() \n        setCircleCenter()\n        reset.set(false) \n      }\n      const coordinates = generateCoordinates(p5)\n      drawShape(p5, coordinates)\n    }\n\n    p5.windowResized = () => {\n      p5.resizeCanvas($screenWidth, $screenHeight)\n    }\n  }\n\n  const setRandomCircleCoords = () => {\n    const divisions = 5\n    const randomNum = () => { return Math.random() * divisions }\n    const xPosition = $screenWidth / divisions * randomNum()\n    const yPosition = $screenHeight / divisions * randomNum()\n    circleLocation.set({ x: xPosition, y: yPosition })\n  }\n  \n  const setCircleCenter = () => {\n    circleLocation.set({ x: $screenWidth / 2, y: $screenHeight / 2 }, {\n      hard: true\n    })\n  }\n  \n  const setFrequency = (frequencyValue) => {\n    clearInterval(interval)\n    if (frequencyValue == 0) { return }\n    \n    const milliseconds = (1 - frequencyValue) * 5000\n    interval = setInterval(() => { setRandomCircleCoords() }, milliseconds)\n  }\n\n  const setMousePull = (pull) => {\n    if (pull) {\n     setFrequency(0)\n     cursorStyle = 'cell'\n    } else {\n      setFrequency($frequencyValue)\n      setRandomCircleCoords()\n      cursorStyle = 'pointer'\n    }\n    mousePull = pull\n  }\n\n  const handleMousemove = (e) => {\n    mouseLocation.x = e.clientX\n    mouseLocation.y = e.clientY\n  }\n\n  onMount(async () => {\n    await $screenWidth && $screenHeight\n    setCircleCenter()\n  })\n\n  setInterval(() => {\n    circleHue.set(hueMaxValue * $circleLocation.x / $screenWidth)\n    \n    if ($active) { //prevents glitchy background on refocus\n      backgroundHue.set(hueMaxValue * $circleLocation.y / $screenHeight)\n    }\n  }, 1000);\n\n  setInterval(() => {\n    if (mousePull) {\n      circleLocation.set(mouseLocation)\n    }\n  }, 10)\n</script>\n\n<style>       \n  div { \n    height: 100%;\n    width: 100%;\n    background-color: hsl(var(--backgroundHue), 50%, 95%);\n    position: fixed;\n    top: 0;\n    cursor: var(--cursorStyle);\n  }\n</style>\n\n<div\n  id='background-holder'\n  style='--backgroundHue:{$backgroundHue}; --cursorStyle:{cursorStyle};'\n  on:mousedown={() => setMousePull(true)}\n  on:mouseup={() => setMousePull(false)}\n  on:touchstart={() => setMousePull(true)}\n  on:touchend={() => setMousePull(false)}\n  on:mousemove={handleMousemove}\n>\n  <P5Canvas sketch={sketch} />\n</div>",
    "<script>\n  import { tweened } from 'svelte/motion'\n  import { cubicIn, backIn } from 'svelte/easing'\n  import { fade } from 'svelte/transition'\n\n  import { longestScreenDimension } from '../stores.js'\n  \n  export let loaded\n  let animationComplete = false\n  const loaderProgress = tweened(0, { duration: 3000 })\n  const circleRadius = tweened(8)\n  const maskTransparency = tweened(100)\n  loaderProgress.set(360)\n    \n  const loadedAnimation = () => {\n    circleRadius.set(0, { delay: 400, duration: 500, easing: backIn })\n    maskTransparency.set(0, { delay: 300, duration: 500, easing: cubicIn })\n    setTimeout(() => { animationComplete = true }, 1100)\n  }\n\n  setInterval(() => {\n    if (!loaded) {\n      loaderProgress.set(0, { duration: 0 })\n\t\t  loaderProgress.set(360)\n    }\n  }, 3000)\n  \n  $: if (loaded) { loadedAnimation() }\n</script>\n\n<style>\n  div {\n    position: absolute;\n    z-index: 2;\n    background-color:hsl(0,0%,100%,var(--transparency));\n  }\n  svg {\n    height: var(--dimension);\n    width: var(--dimension);\n  }\n\n  circle {\n    fill: hsl(0,0%,100%,calc(var(--transparency) + 30%));\n  }\n\n  path {\n    stroke: hsl(0,0%,0%,var(--transparency));\n    fill: none;\n    stroke-linecap: square;\n    stroke-width: 0.5 ;\n    stroke-miterlimit: 2;\n  }\n\n  stop {\n    stop-color: hsl(calc(var(--progress) + var(--startHue)),100%,85%,var(--transparency));\n  }\n</style>\n\n{#if !animationComplete }\n  <div transition:fade \n    style=\"\n      --transparency:{$maskTransparency}%;\n      --dimension:{$longestScreenDimension}px;\n      --progress:{$loaderProgress};\n    \"\n  >\n    <svg viewBox=\"0 0 100 100\" style=\"\">\n      <defs>\n        <mask id=\"circleMask\">\n          <rect height=\"100\" width=\"100\" fill=\"hsl(0,0%,10%)\"/>\n          <circle cx=\"50\" cy=\"50\" r=\"{$circleRadius}\" />\n          <path d=\"M46 55 L46 45 L50 52 L54 45 L54 55 L46 55\" />\n        </mask>\n        <radialGradient id=\"GradientReflect\"\n          cx=\"0.5\" cy=\"0.5\" r=\"0.4\" fx=\"0.75\" fy=\"0.75\"\n          spreadMethod=\"reflect\">\n          <stop offset=\"0%\" style=\"--startHue:0\"/>\n          <stop offset=\"10%\" style=\"--startHue:36\"/>\n          <stop offset=\"20%\" style=\"--startHue:72\"/>\n          <stop offset=\"30%\" style=\"--startHue:108\"/>\n          <stop offset=\"50%\" style=\"--startHue:144\"/>\n          <stop offset=\"60%\" style=\"--startHue:180\"/>\n          <stop offset=\"70%\" style=\"--startHue:216\"/>\n          <stop offset=\"80%\" style=\"--startHue:252\"/>\n          <stop offset=\"90%\" style=\"--startHue:288\"/>\n          <stop offset=\"100%\" style=\"--startHue:324\"/>\n        </radialGradient>\n      </defs>\n      <rect width='100' height='100' fill=\"url(#GradientReflect)\" mask=\"url(#circleMask)\"/>\n    </svg>\n  </div>\n{/if}",
    "<script>\n  import { fade } from 'svelte/transition'\n  import P5Canvas from '../../P5Canvas.svelte'\n  import { closeHover, screenSize } from '../../stores.js'\n  import {\n    closeButtonMargin,\n    drawContainer,\n    drawXIcon,\n    setupCanvas,\n    transparentText,\n    transparentTitle\n  } from '../../helpers.js'\n  \n  let homeHeight, homeWidth\n\n  const drawName = (p5) => {\n    const textSize = $screenSize == 'large' ? 48 : 36\n    const margin = $screenSize == 'large' ? 40 : 20\n    p5.textAlign(p5.RIGHT, p5.BOTTOM)\n    transparentText(p5, { \n      text: 'Max\\nhouston\\noppenheiMer', \n      textSize,\n      horizontalAlignment: p5.RIGHT,\n      verticalAlignment: p5.BOTTOM,\n      xPosition: homeWidth - margin, \n      yPosition: homeHeight - margin \n    })\n  }\n\n  const sketch = (p5) => {\n\t  p5.setup = () => {\n      setupCanvas(p5, homeWidth, homeHeight, 'home')\n      p5.frameRate(10)\n    }\n    \n    p5.draw = () => {\n      p5.clear()\n      drawContainer(p5, homeWidth, homeHeight)\n      transparentTitle(p5, 'developMent | design | consulting', $screenSize)\n      drawName(p5)\n      const margin = closeButtonMargin($screenSize)\n      drawXIcon(p5, homeWidth - margin, margin, $closeHover)\n    }\n\n    p5.windowResized = () => {\n      p5.resizeCanvas(homeWidth, homeHeight)\n      p5.redraw()\n    }\n  }\n</script>\n  \n<style>\n  #home {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n  }\n</style>\n\n<div \n  id='home'\n  transition:fade\n  bind:clientHeight={homeHeight}\n  bind:clientWidth={homeWidth}\n>\n  <div class='screen-reader-content'>\n    <h2>Development, Design, Consulting</h2>\n    <h1>Max Houston Oppenheimer</h1>\n  </div>\n  <P5Canvas sketch={sketch} />\n</div>",
    "<script>\n  import { fade } from 'svelte/transition'\n  \n  import P5Canvas from '../../P5Canvas.svelte'\n  import drawAbout from './drawAbout'\n  import { closeHover, screenSize } from '../../stores.js'\n  import { setupCanvas } from '../../helpers.js'\n  \n  let aboutHeight, aboutWidth\n\n  const sketch = (p5) => {\n\t  p5.setup = () => {\n      setupCanvas(p5, aboutWidth, aboutHeight, 'about')\n      p5.frameRate(10)\n    }\n    \n    p5.draw = () => {\n      drawAbout(p5, aboutWidth, aboutHeight, $screenSize, $closeHover)\n    }\n\n    p5.windowResized = () => {\n      p5.resizeCanvas(aboutWidth, aboutHeight)\n      p5.redraw()\n    }\n  }\n</script>\n  \n<style>\n #about {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n  }\n</style>\n\n<div id='about'\n  transition:fade\n  bind:clientHeight={aboutHeight}\n\tbind:clientWidth={aboutWidth}\n>\n  <div class='screen-reader-content'>\n    <h2>Who am I? What is this?</h2>\n    <h3>I am:</h3>\n    <ul>\n      <li>an engineer, artist, and designer</li>\n      <li>transparent, compassionate, curious</li>\n      <li>passionate about empowerment, accessibilty, and education</li>\n      <li>human and need money to survive</li>\n      <li>working to create balance</li>\n    </ul>\n    <h3>This is:</h3>\n    <ul>\n      <li>a generative art experienceand and portfolio</li>\n      <li>an opportunity to play (for you and me)</li>\n      <li>an animation and interaction design flex</li>\n      <li>a work in progress :)</li>\n    </ul>\n  </div>\n  <P5Canvas sketch={sketch} />\n</div>",
    "<script>\n  import { fade } from 'svelte/transition'\n\n  import P5Canvas from '../../P5Canvas.svelte'\n  import { closeHover, screenSize } from '../../stores.js'\n  import {\n    closeButtonMargin,\n    drawContainer,\n    drawXIcon,\n    getOpacity,\n    transparentText,\n    transparentTitle,\n    setupCanvas\n  } from '../../helpers.js'\n\n  let contactHeight, contactWidth, name, email, message, honeypot, errorMessage\n  let hover = false\n  let messageSent = false\n  let sending = false\n\n  const drawThankyou = (p5) => {\n    transparentText(p5, {\n      text: \"Thanks! We'll reach out soon :)\",\n      textSize: 18,\n      horizontalAlignment: p5.RIGHT,\n      verticalAlignment: p5.BOTTOM,\n      xPosition: 100,\n      yPosition: 40,\n      width: contactWidth - 140,\n      height: contactHeight - 80\n    })\n  }\n\n  const drawLabels = (p5) => {\n    const textWidthLarge = contactWidth * 0.30 - 45\n    const textWidthSmall = contactWidth * 0.30 - 20\n    const textWidth = $screenSize == 'large' ? textWidthLarge : textWidthSmall\n    const yOffset = $screenSize == 'large' ? 174 : 158\n    const textSize = $screenSize == 'large' ? 20 : 12\n    p5.textSize(textSize)\n    p5.textAlign(p5.RIGHT, p5.CENTER)\n    \n    transparentText(p5, {\n      text: 'name',\n      xPosition: 0,\n      yPosition: contactHeight - yOffset - 86,\n      width: textWidth,\n      height: 20\n    })\n    transparentText(p5, {\n      text: 'email',\n      xPosition: 0,\n      yPosition: contactHeight - yOffset - 43,\n      width: textWidth,\n      height: 20\n    })\n    transparentText(p5, {\n      text: 'message',\n      xPosition: 0,\n      yPosition: contactHeight - yOffset,\n      width: textWidth,\n      height: 20\n    })\n  }\n  \n  const drawSubmitButton = (p5) => {\n    const textSize = $screenSize == 'large' ? 20 : 212\n    const margin = $screenSize == 'large' ? 40 : 20\n    const rectWidth = contactWidth * 0.70\n    const rectHeight = 32\n    const xPosition = contactWidth - rectWidth - margin\n    const yPosition = contactHeight - margin - 34\n    const opacity = getOpacity(hover)\n    p5.erase()\n    p5.rect(xPosition, yPosition, rectWidth, rectHeight)\n    p5.noErase()\n    \n    p5.fill(0, 0, 0, opacity)\n    p5.rect(xPosition, yPosition, rectWidth, rectHeight)\n\n    const buttonText = sending ? '...' : 'submit'\n\n    p5.fill(50, 50, 100)\n    p5.noStroke()\n    p5.textSize(textSize)\n    p5.textAlign(p5.CENTER, p5.CENTER)\n    p5.text(buttonText, xPosition, yPosition, rectWidth, rectHeight)\n  }\n\n  const drawErrorMessage = (p5) => {\n    const rectWidth = contactWidth * 0.70\n  \n    transparentText(p5, {\n      text: errorMessage,\n      textSize: 12,\n      horizontalAlignment: p5.CENTER,\n      verticalAlignment: p5.CENTER,\n      xPosition: contactWidth - rectWidth - 40,\n      yPosition: contactHeight - 35,\n      width: contactWidth * 0.70,\n      height: 32\n    })\n  }\n\n  const sketch = (p5) => {\n\t  p5.setup = () => {\n      setupCanvas(p5, contactWidth, contactHeight, 'contact')\n      p5.frameRate(10)\n\t  }\n\n    p5.draw = () => {\n      p5.clear()\n      drawContainer(p5, contactWidth, contactHeight)\n      transparentTitle(p5, 'how Might we.. work together? :)', $screenSize)\n      const margin = closeButtonMargin($screenSize)\n      drawXIcon(p5, contactWidth - margin, margin, $closeHover)\n      if (!messageSent) {\n        drawLabels(p5)\n        drawSubmitButton(p5)\n      } else {\n        drawThankyou(p5)\n      }\n      if (errorMessage) { drawErrorMessage(p5) }\n    }\n\n    p5.windowResized = () => {\n      p5.resizeCanvas(contactWidth, contactHeight)\n      p5.redraw()\n    }\n  }\n\n  const setErrorMessage = () => {\n    let newMessage = []\n    if (!name) { newMessage.push('name is required')}\n    if (!email) { newMessage.push('email is required')}\n    if (!message) { newMessage.push('message is required')}\n\n    errorMessage = newMessage.join(', ')\n  }\n\n  const submitForm = () => {\n    if (name && email && message && !honeypot && !sending) {\n      sending = true\n      var url = 'https://script.google.com/macros/s/AKfycbzRZDcDygipswfktZnpvNlzkZr95KF2YgPocqwkQg/exec'\n      var xhr = new XMLHttpRequest()\n      xhr.open('POST', url)\n      xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          messageSent = true\n        } else if (xhr.status !== 200) {\n          errorMessage = 'oops, something went wrong'\n        }\n        sending = false\n      }\n      xhr.send(JSON.stringify({name, email, message}))\n    } else {\n      setErrorMessage()\n    }\n  }\n</script>\n  \n<style>\n #contact {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n  }\n  \n  form {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    position: absolute;\n    width: 100%;\n    margin-right: var(--margin);\n    bottom: 0;\n    right: 0;\n  }\n\n  input, textarea {\n    width: 70%;\n    font-family: 'Montserrat';\n    color: darkslategray;\n    background-color: transparent;\n    border-radius: 0;\n  }\n\n  textarea {\n    height: 100px;\n    resize: none;\n  }\n\n  button {\n    \n    margin: 0 0 var(--margin) 0;\n    width: 70%;\n    align-self: flex-end;\n    opacity: 0;\n  }\n</style>\n\n<div id='contact'\n  transition:fade\n  bind:clientHeight={contactHeight}\n\tbind:clientWidth={contactWidth}\n>\n  <div class='screen-reader-content'>\n    <h2>How might we.. work together?</h2>\n  </div>\n  {#if !messageSent}\n    <form style='--margin:{$screenSize == 'large' ? 40 : 20}px'>\n        <label for='name' class='screen-reader-content'>Name</label>\n        <input id='name' bind:value={name} type='text' name='name'>\n        <label for='email' class='screen-reader-content'>Email</label>\n        <input id='email' bind:value={email} type='email' name='email'>\n        <p class='screen-reader-content'>Warning: do not fill in value for 'honeypot' input. It is designed to prevent bots. Leave blank.</p>\n        <input bind:value={honeypot} type=\"hidden\" name='honeypot'>\n        <label for='message' class='screen-reader-content'>Message</label>\n        <textarea id='message' bind:value={message} name='message'></textarea>\n      <button type='submit' name='submit'\n        on:click|preventDefault={submitForm}\n        on:mouseover={() => { hover = true }}\n        on:mouseout={() => { hover = false }}\n      >\n        submit\n      </button>\n      {#if errorMessage}\n        <p class='screen-reader-content'>{errorMessage}</p>\n      {/if}\n    </form>\n  {/if}\n  <P5Canvas sketch={sketch} />\n</div>",
    "<script>\n  import { onMount } from 'svelte'\n\n  import ControlSlider from './ControlSlider/ControlSlider.svelte'\n  import ResetButton from './ResetButton/ResetButton.svelte'\n  import { setupCanvas, logStiffness, logDamping } from '../../helpers'\n  import { \n    circleLocation,\n    sizeValue,\n    speedValue,\n    opacityValue,\n    frequencyValue,\n    sizeProgress,\n    speedProgress,\n    opacityProgress,\n    frequencyProgress,\n  } from '../../stores.js'\n\n  let sizeButtonParams = {\n    text: 'size',\n    progressWritable: sizeProgress,\n  }\n  let speedButtonParams = {\n    text: 'speed',\n    progressWritable: speedProgress,\n  }\n  let opacityButtonParams = {\n    text: 'opac',\n    progressWritable: opacityProgress,\n  }\n  let frequencyButtonParams = {\n    text: 'freq',\n    progressWritable: frequencyProgress,\n  }\n\n  let buttonParams = [sizeButtonParams, speedButtonParams, opacityButtonParams, frequencyButtonParams]\n\n  const setButtonParams = (text, progress, value=null) => {\n    const button = buttonParams.find(button => button.text == text)\n    \n    button.text = text\n    button.value = value\n    button.progress = progress\n  }\n\n  $: setButtonParams('size', $sizeProgress, $sizeValue)\n  $: setButtonParams('speed', $speedProgress, $speedValue)\n  $: setButtonParams('opac', $opacityProgress, $opacityValue)\n  $: setButtonParams('freq', $frequencyProgress, $frequencyValue)\n\n  const setCircleSpeed = (e) => {\n    const value = e.target.value\n    circleLocation.stiffness = logStiffness(value)\n    circleLocation.damping = logDamping(value)\n  }\n\n  onMount(() => {\n    setButtonParams('size', $sizeProgress, $sizeValue)\n    setButtonParams('speed', $speedProgress, $speedValue)\n    setButtonParams('opac', $opacityProgress, $opacityValue) \n    setButtonParams('freq', $frequencyProgress, $frequencyValue)\n  })\n</script>\n\n<style>\n  .background-controls {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    align-items: flex-end;\n    min-height: 350px;\n    height: 100%;\n    flex: 1;\n    pointer-events: none;\n  }\n\n  .fill-div {\n    flex-grow: 1;\n    background-color: hsla(0,0%,100%,90%);\n    width: 60px;\n  }\n\n  .bottom-padding {\n    height: 10px;\n    background-color: hsla(0,0%,100%,90%);\n    width: 60px;\n  }\n</style>\n\n<div class=\"background-controls\" aria-label=\"background controls\">\n  <div class='fill-div'></div>\n  <ResetButton />\n  <ControlSlider\n    button={sizeButtonParams} \n    progress={$sizeProgress}\n    bind:value={$sizeValue}/>\n  <ControlSlider\n    button={speedButtonParams} \n    progress={$speedProgress}\n    inputCallback={setCircleSpeed}\n    bind:value={$speedValue}/>\n  <ControlSlider\n    button={opacityButtonParams} \n    progress={$opacityProgress}\n    bind:value={$opacityValue}/>\n  <ControlSlider\n    button={frequencyButtonParams} \n    progress={$frequencyProgress}\n    bind:value={$frequencyValue}/>\n  <div class='bottom-padding'></div>\n</div>\n",
    "<script>\n  import P5Canvas from '../../P5Canvas.svelte'\n  import drawHomeButton from './drawHomeButton'\n  import { setupCanvas } from '../../helpers'\n  import {\n    open,\n    currentView,\n    screenSize,\n    infoProgress,\n    sizeProgress,\n    speedProgress,\n    opacityProgress,\n    frequencyProgress \n  } from '../../stores'\n\n  let homeButtonWidth\n  const homeButtonHeight = 70\n  let homeHover = false\n  let buttonProgresses = [\n    infoProgress,\n    sizeProgress,\n    speedProgress,\n    opacityProgress,\n    frequencyProgress \n  ]\n  \n  const handleOpen = () => {\n    open.set(true)\n    currentView.set('home')\n    buttonProgresses.forEach(progress => progress.set(0))\n  }\n\n  const sketch = (p5) => {\n    p5.setup = () => {\n      setupCanvas(p5, homeButtonWidth, homeButtonHeight, 'home-button-canvas-container')\n    }\n\n    p5.draw = () => {\n      drawHomeButton(p5, homeButtonWidth, homeButtonHeight, homeHover, $screenSize)\n    }\n\n    p5.windowResized = () => {\n      p5.clear()\n      p5.resizeCanvas(homeButtonWidth, homeButtonHeight)\n      p5.redraw()\n    }\n  }\n\n</script> \n\n<style>\n  #home-button-canvas-container {\n    width: 60px;\n    min-height: var(--height);\n  }\n  \n  .home-button { \n    position: absolute;\n    top: 0;\n    height: 70px;\n    width: 60px;\n    opacity: 0;\n  }\n</style>\n\n<div \n  id='home-button-canvas-container'\n  bind:clientWidth={homeButtonWidth}\n  style='--height:{homeButtonHeight}px'\n>\n  <P5Canvas sketch={sketch}/>\n</div>\n<button\n  aria-label='home button'\n  class='home-button'\n  on:click={handleOpen} \n  on:mouseover={() => { homeHover = true }}\n  on:mouseout={() => { homeHover = false }} />\n",
    "<script>\n  import { onMount } from 'svelte'\n  import P5Canvas from '../../P5Canvas.svelte'\n  import drawInfoButton from './drawInfoButton.js'\n  import { openControlButtons, setupCanvas } from '../../helpers'\n  import {\n    closedOnce,\n    infoProgress,\n    open,\n    screenSize,\n    touch,\n    sizeProgress,\n    speedProgress,\n    opacityProgress,\n    frequencyProgress\n  } from '../../stores.js'\n\n  const controlButtons = [sizeProgress, speedProgress, opacityProgress, frequencyProgress]\n\n  const largeHeight = 290\n  const smallHeight = 230\n\n  let maxWidth\n  let infoButtonHeight\n  let infoButtonWidth = 60\n  let infoButtonXOffset = 0\n\n  let infoParams = {\n    progressWritable: infoProgress,\n    hover: false\n  }\n\n  const handleClick = () => {\n    infoProgress.set($infoProgress ? 0 : 1)\n    open.set(false)\n    if (!$closedOnce) {\n      openControlButtons(controlButtons)\n      closedOnce.set(true)\n    }\n  }\n\n  const setInfoButtonWidth = (screenSize, infoProgress) => {\n    maxWidth = screenSize == 'large' ? 480 : 375\n    infoButtonWidth = (maxWidth * infoProgress) || 60\n  }\n\n  const slideInfoButton = (infoProgress) => {\n    infoButtonXOffset = (60 - infoButtonWidth) * (1 - infoProgress) \n  }\n\n  const sketch = (p5) => {\n    p5.setup = () => {\n      setupCanvas(p5, maxWidth, infoButtonHeight, 'info-button-canvas-container')\n    }\n\n    p5.draw = () => {\n      drawInfoButton(p5, maxWidth, infoButtonHeight, infoParams, $screenSize, $touch)\n    }\n\n    p5.windowResized = () => {\n      p5.clear()\n      p5.resizeCanvas(maxWidth, infoButtonHeight)\n      p5.redraw()\n    }\n  }\n\n  $: infoButtonHeight = $screenSize == 'small' ? smallHeight : largeHeight\n  $: infoParams.progress = $infoProgress\n  $: setInfoButtonWidth($screenSize, $infoProgress)\n  $: slideInfoButton($infoProgress)\n\n  onMount(() => { \n    infoParams.progress = $infoProgress\n    setInfoButtonWidth($screenSize, $infoProgress)\n    slideInfoButton($infoProgress)\n  })\n</script>\n\n<style>\n  #info-button-canvas-container {\n    position: relative;\n    right: 0;\n    height: var(--height);\n    width: var(--maxWidth);\n    pointer-events: none;\n  }\n\n  .info-button { \n    position: absolute;\n    top: 0;\n    right: 0;\n    height: 100%;\n    width: var(--infoButtonWidth);\n    pointer-events: all;\n    opacity: 0;\n  }\n</style>\n\n<div \n  id='info-button-canvas-container'\n  style='\n    --infoButtonWidth:{infoButtonWidth}px; \n    --infoButtonXOffset:{infoButtonXOffset}px;\n    --height:{infoButtonHeight}px;\n    --maxWidth:{maxWidth}px;\n  '\n>\n  <P5Canvas sketch={sketch}/>\n  <button\n    aria-label='animation info button'\n    class='info-button'\n    on:click={handleClick} \n    on:mouseover={() => { infoParams.hover = true }}\n    on:mouseout={() => { infoParams.hover = false }} />\n  {#if $infoProgress}\n    <div class='screen-reader-content'>\n      <h3>animation info</h3>\n      <p>The animation behind moves for itsel. It reacts to your mouse and can be modified with the controls below</p>\n      <p>size - size of shape</p>\n      <p>speed - rate of movement</p>\n      <p>opac - shape transparency</p>\n      <p>freq - frequency of direction change</p>\n      <p>click and hold to pull towards mouse</p>\n    </div>\n  {/if}\n</div>",
    "<script>  \n  import P5Canvas from '../../../P5Canvas.svelte'\n  import { setupCanvas } from '../../../helpers'\n  import drawControlSlider from './drawControlSlider'\n  import { screenSize } from '../../../stores'\n  export let button\n  export let progress\n  export let value\n  export let inputCallback = null\n  \n  let hover = false\n  let sliderWidth = 300\n  let sliderHeight\n  let buttonXOffset\n\n  const handleClick = () => {\n    if (progress == 0) {\n      button.progressWritable.set(1)\n    } else {\n      button.progressWritable.set(0)\n    }\n  }\n\n  const slideSlider = (progress) => {\n    buttonXOffset = (60 - sliderWidth) * (1 - progress)\n  }\n\n  const sketch = (p5) => {\n    p5.setup = () => {\n      setupCanvas(p5, sliderWidth, sliderHeight, `${button.text}-canvas`)\n    }\n\n    p5.draw = () => {\n      drawControlSlider(p5, sliderWidth, button, $screenSize)\n    }\n\n    p5.windowResized = () => {\n      p5.clear()\n      p5.resizeCanvas(sliderWidth, sliderHeight)\n      p5.redraw()\n    }\n  }\n\n  $: sliderHeight = $screenSize == 'small' ? 50 : 70\n  $: button.hover = hover\n  $: slideSlider(progress)\n</script>\n\n<style>\n  .control-slider {\n    position: relative;\n    height: var(--height);\n    width: 300px;\n  }\n\n  button {\n    position: absolute;\n    margin: 0;\n    right: 0;\n    height: 100%;\n    width: 60px;\n    z-index: 1;\n    opacity: 0;\n    pointer-events: all;\n  }\n\n  .pointer-screen {\n    position: absolute;\n    pointer-events: all;\n    width: 100%;\n    height: 100%;\n  }\n\n  input {\n    position: absolute;\n    right: 43px;\n    top: 20px;\n    width: 265px;\n    opacity: 0;\n    pointer-events: all;\n  }\n\n   input[type=range]::-webkit-slider-thumb {\n    height: 35px;\n    width: 35px;\n    border-radius: 15px;\n    cursor: pointer;\n    opacity: 0;\n  }\n\n  input[type=range]::-moz-range-thumb {\n    height: 35px;\n    width: 35px;\n    border-radius: 15px;\n    margin-top: -14px;\n    cursor: pointer;\n    opacity: 0;\n  }\n\n  input[type=range]::-ms-thumb {\n    height: 35px;\n    width: 35px;\n    border-radius: 15px;\n    margin-top: -14px;\n    cursor: pointer;\n    opacity: 0;\n  }\n</style>\n\n<div \n  id='{button.text}-canvas' \n  class='control-slider'\n  style='\n    --buttonXOffset:{buttonXOffset}px;\n    --height:{sliderHeight}px;    \n  '\n>\n  {#if button.progress}\n    <div class='pointer-screen'></div>\n    <label class='screen-reader-content' for={button.text}>{button.text}</label>\n    <input \n      id={button.text}\n      type='range'\n      min='0' max='1' step='0.01' \n      aria-valuemin='0' aria-valuemax='1' aria-valuenow='{value}'\n      on:input={inputCallback}\n      bind:value={value} />\n    <output class='screen-reader-content' for={button.text}>{value}</output>\n  {/if}\n  <button \n    aria-label='toggle {button.text} slider input'\n    on:click={handleClick}\n    on:mouseover={() => {hover = true}}\n    on:mouseout={() => {hover = false}} \n  />\n  <P5Canvas sketch={sketch} />\n</div>",
    "<script>  \n  import { tweened } from 'svelte/motion'\n  import { cubicIn } from 'svelte/easing'\n  import P5Canvas from '../../../P5Canvas.svelte'\n  import { setupCanvas } from '../../../helpers'\n  import drawResetButton from './drawResetButton'\n  import { reset, screenSize } from '../../../stores'\n\n  let hover = false\n  let buttonHeight\n  const buttonWidth = 60\n  const rotation = tweened(0, { duration: 500, easing: cubicIn })\n\n  const handleClick = () => {\n    rotation.set(0, { duration: 0 } )\n    rotation.set(2 * Math.PI)\n    reset.set(true)\n  }\n\n  const sketch = (p5) => {\n    p5.setup = () => {\n      setupCanvas(p5, buttonWidth, buttonHeight, 'reset-button-canvas')\n    }\n\n    p5.draw = () => {\n      drawResetButton(p5, buttonWidth, buttonHeight, hover, $rotation, $screenSize)\n    }\n\n    p5.windowResized = () => {\n      p5.clear()\n      p5.resizeCanvas(buttonWidth, buttonHeight)\n      p5.redraw()\n    }\n  }\n\n  $: buttonHeight = $screenSize == 'small' ? 50 : 70\n</script>\n\n<style>\n  .reset-button {\n    position: relative;   \n    height: var(--height);\n    width: 60px;\n  }\n\n  button {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    border: 0;\n    padding: 0;\n    z-index: 1;\n    opacity: 0;\n    pointer-events: all;\n  }\n</style>\n\n<div \n  id='reset-button-canvas' \n  class='reset-button'\n  style='--height:{buttonHeight}px'\n>\n  <button \n    aria-label=\"reset button\"\n    on:click={handleClick}\n    on:mouseover={() => {hover = true}}\n    on:mouseout={() => {hover = false}}>\n    reset\n  </button>\n  <P5Canvas sketch={sketch} />\n</div>"
  ],
  "names": [],
  "mappings": "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"
}